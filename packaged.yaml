AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Outputs:
  RestAPIId:
    Value:
      Ref: RestAPI
  APIHandlerName:
    Value:
      Ref: APIHandler
  APIHandlerArn:
    Value:
      Fn::GetAtt:
      - APIHandler
      - Arn
  EndpointURL:
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/api/
  SourceRepoURL:
    Value:
      Fn::GetAtt: SourceRepository.CloneUrlHttp
  S3ApplicationBucket:
    Value:
      Ref: ApplicationBucket
  CodeBuildRoleArn:
    Value:
      Fn::GetAtt: CodeBuildRole.Arn
  S3PipelineBucket:
    Value:
      Ref: ArtifactBucketStore
  CodePipelineRoleArn:
    Value:
      Fn::GetAtt: CodePipelineRole.Arn
  CFNDeployRoleArn:
    Value:
      Fn::GetAtt: CFNDeployRole.Arn
Resources:
  DefaultRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:*:logs:*:*:*
        PolicyName: DefaultRolePolicy
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: EDGE
      StageName: api
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '1.0'
          title: restaurant-menu-and-order
        schemes:
        - https
        paths:
          /:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /users:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
        definitions:
          Empty:
            type: object
            title: Empty Schema
        x-amazon-apigateway-binary-media-types:
        - application/octet-stream
        - application/x-tar
        - application/zip
        - audio/basic
        - audio/ogg
        - audio/mp4
        - audio/mpeg
        - audio/wav
        - audio/webm
        - image/png
        - image/jpg
        - image/jpeg
        - image/gif
        - video/ogg
        - video/mpeg
        - video/webm
  APIHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: app.app
      CodeUri: s3://restaurant-menu-and-order-app-dev/2f5f6c24657f98516ba8699e7821e2bd
      Tags:
        aws-chalice: version=1.27.3:stage=dev:app=restaurant-menu-and-order
      Tracing: PassThrough
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          GEN_TABLE_NAME: menu-order-gen-dev
      Role:
        Fn::GetAtt:
        - DefaultRole
        - Arn
  APIHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: APIHandler
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI
  SourceRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName:
        Ref: ApplicationName
      RepositoryDescription:
        Fn::Sub: Source code for ${ApplicationName}
  ApplicationBucket:
    Type: AWS::S3::Bucket
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::Sub: codebuild.${AWS::URLSuffix}
  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
          Effect: Allow
        - Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          Resource: arn:*:s3:::*
          Effect: Allow
      Roles:
      - Ref: CodeBuildRole
  AppPackageBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          Ref: CodeBuildImage
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: APP_S3_BUCKET
          Value:
            Ref: ApplicationBucket
      Name:
        Fn::Sub: ${ApplicationName}Build
      ServiceRole:
        Fn::GetAtt: CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: "artifacts:\n  files:\n  - transformed.yaml\n  type: zip\nphases:\n\
          \  install:\n    commands:\n    - sudo pip install --upgrade awscli\n  \
          \  - aws --version\n    - sudo pip install 'chalice>=1.27.0,<1.28.0'\n \
          \   - sudo pip install -r requirements.txt\n    - chalice package /tmp/packaged\n\
          \    - aws cloudformation package --template-file /tmp/packaged/sam.json\
          \ --s3-bucket\n      ${APP_S3_BUCKET} --output-template-file transformed.yaml\n\
          version: '0.1'\n"
  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name:
        Fn::Sub: ${ApplicationName}Pipeline
      ArtifactStore:
        Type: S3
        Location:
          Ref: ArtifactBucketStore
      RoleArn:
        Fn::GetAtt: CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - ActionTypeId:
            Category: Source
            Owner: AWS
            Version: 1
            Provider: CodeCommit
          Configuration:
            BranchName: master
            RepositoryName:
              Fn::GetAtt: SourceRepository.Name
          OutputArtifacts:
          - Name: SourceRepo
          RunOrder: 1
          Name: Source
      - Name: Build
        Actions:
        - InputArtifacts:
          - Name: SourceRepo
          Name: CodeBuild
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          OutputArtifacts:
          - Name: CompiledCFNTemplate
          Configuration:
            ProjectName:
              Ref: AppPackageBuild
          RunOrder: 1
      - Name: Beta
        Actions:
        - ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          InputArtifacts:
          - Name: CompiledCFNTemplate
          Name: CreateBetaChangeSet
          Configuration:
            ActionMode: CHANGE_SET_REPLACE
            ChangeSetName:
              Fn::Sub: ${ApplicationName}ChangeSet
            RoleArn:
              Fn::GetAtt: CFNDeployRole.Arn
            Capabilities: CAPABILITY_IAM
            StackName:
              Fn::Sub: ${ApplicationName}BetaStack
            TemplatePath: CompiledCFNTemplate::transformed.yaml
          RunOrder: 1
        - RunOrder: 2
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CloudFormation
          Configuration:
            StackName:
              Fn::Sub: ${ApplicationName}BetaStack
            ActionMode: CHANGE_SET_EXECUTE
            ChangeSetName:
              Fn::Sub: ${ApplicationName}ChangeSet
            OutputFileName: StackOutputs.json
          Name: ExecuteChangeSet
          OutputArtifacts:
          - Name: AppDeploymentValues
  ArtifactBucketStore:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: DefaultPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:CreateBucket
            - s3:PutObject
            - s3:PutBucketVersioning
            Resource: '*'
            Effect: Allow
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: '*'
            Effect: Allow
          - Action:
            - cloudwatch:*
            - iam:PassRole
            Resource: '*'
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: '*'
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            - iam:PassRole
            Resource: '*'
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            Resource: '*'
            Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::Sub: codepipeline.${AWS::URLSuffix}
  CFNDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: DeployAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: '*'
            Resource: '*'
            Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::Sub: cloudformation.${AWS::URLSuffix}
Parameters:
  ApplicationName:
    Default: restaurant-menu-and-order
    Type: String
    Description: Enter the name of your application
  CodeBuildImage:
    Default: aws/codebuild/python:3.7.1
    Type: String
    Description: Name of codebuild image to use.
